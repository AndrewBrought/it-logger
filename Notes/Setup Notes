We will setup our backend using JSON-Server

It's a development backend, it's called a fake RESt API.  It mimic's an API

We create a json file that will essentially be our database - we'll use "logs" and "technicians".
We'll call json server and watch that file, then we make all types of requests to it

npx create-react-app .
The "." means the current folder

We'l install json server along with concurrently and we'll create a script so that we can run json server and react
at the same time.

Then we run: npm i -D (this installs as Dev-dependencies) json-server concurrently

Now we create a db.json file in the root

Then we create our data:
{
"logs": [
 {
   "id": 1,
   "message": "Changes hard drive on workstation 005",
   "attention": false,
   "date": "03-02-2019",
   "tech": "Sam Smith"
 },
 {
    "id": 2,
    "message": "Workstation 007 not posting",
    "attention": false,
    "date": "03-02-2019",
    "tech": "John Doe"
  },
  {
     "id": 3,
     "message": "Changed memory on workstation 050",
     "attention": false,
     "date": "03-02-2019",
     "tech": "Sara Wilson"
   },
 ],
 "techs": [
 {
    "id": 1,
    "firstName": "John",
    "lastName": "Doe"
 },
 {
     "id": 2,
     "firstName": "Sam",
     "lastName": "Smith"
  },
  {
      "id": 3,
      "firstName": "Sarah",
      "lastName": "Wilson"
   }
 ]
}

In package.json we add a few things:
In scripts we add:
"json-server": "json-server --watch db.json --port 5000",
"dev": "concurrently \"npm start\" \"npm run json-server\"", -Now when we run: 'npm run dev' we should be running both
servers simultaneously

We add proxy to package.json

We're going to use materializecss.com a css frame work for this project - like bootstrap

We'll be using some of the built-in modals

**Important Note: While it's common to use Material-UI because it has React components built in as opposed to
html classes, we wont be using Material-UI for the reason that you have to write a large amount of code just to get
things like a navbar setup.

We'll also use Material Icons

instead of using a CDN for Materialize in this project, we're going to use npm to install it:
npm i materialize-css

We remove the following included-files: Apptest.js, index.css, logo.svg, serviceWorker.js
    -Then we go into index.js and remove index.css import, serviceWorker import, and lines 9-12, also strict mode
    -Then we go into App.js and remove: logo.svg import and everything inside of the div
    -In this build we remove the contents of App.css
    -import materialize into App.js
    -import materialize js to App.js (so, basically we use App.js as our master page)

For Materialize, to initialize, in React we don't have access to document.addEventListener, we do have access to M
and we can use it with the useEffect hook because it runs automatically
    -We can use something called auto init that will initialize everything for us
    ...so in our App.js we'll bring in our useEffect hook

We also add materialize-icons (https://google.github.io/material-design-icons/) - "Using via Google Web Fonts" to
the index.html
